View(NPF_gene)
vsdata <-vst(dds,blind=FALSE)
?vst
vsdata <-vst(dds,blind=FALSE,nsub=4)
y<-subset(res, pvalue<.05 & abs(log2FoldChange)>=1)
idx<-which(rownames(vsdata[,1]) %in% row.names(y))
significant<-data[idx,]
View(significant)
View(vsdata)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:4]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
View(res)
res@rownames
which(res@rownames == "NPF")
which(res@rownames == "NPFR")
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
#rownames(coldata) <- sub("L00", "", rownames(coldata))
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
#keep <- rowSums(counts(dds)) >= 10
#dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
library(dplyr)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
vsdata <-vst(dds,blind=FALSE)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
autoplotly::autoplotly((plotPCA(vsdata, intgroup="condition")+geom_text(aes(label=name),vjust=3)+labs(title = "PCA:  mated virgin rejected"))
, data = vsdata, colour = 'Species', frame = TRUE)
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#creating a csv file with all the values with pval<.05 & log2FoldChange>=1 from T VS NT for up regulated genes
up<-subset(res, pvalue<.05 & log2FoldChange>=1)
up<-as.data.frame(up)
write.csv(up, "D:/seq_data/npfr/upregulated.csv",
row.names = TRUE)
#creating a csv file with all the values with pval<.05 & log2FoldChange>=1 from T VS NT for down regulated genes
down<-subset(res, pvalue<.05 & log2FoldChange<=-1)
down<-as.data.frame(down)
write.csv(down, "D:/seq_data/npfr/downregulated.csv",
row.names = TRUE)
View(res)
res@rownames
sum(res$padj < 0.1, na.rm=TRUE)
View(up)
View(data)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
#rownames(coldata) <- sub("L00", "", rownames(coldata))
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
library(dplyr)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
#rownames(coldata) <- sub("L00", "", rownames(coldata))
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 30
dds <- dds[keep,]
library(dplyr)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
keep <- rowSums(counts(dds)) >= 50
dds <- dds[keep,]
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
keep <- rowSums(counts(dds)) >= 100
dds <- dds[keep,]
library(dplyr)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
keep <- rowSums(counts(dds)) >= 200
dds <- dds[keep,]
library(dplyr)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
vsdata <-vst(dds,blind=FALSE)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
autoplotly::autoplotly((plotPCA(vsdata, intgroup="condition")+geom_text(aes(label=name),vjust=3)+labs(title = "PCA:  mated virgin rejected"))
, data = vsdata, colour = 'Species', frame = TRUE)
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(vsdata, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
plotMA(res, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
install.packages("apeglm")
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
BiocManager::install("apeglm")
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
resLFC
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
resLFC
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
rownames(res)[idx]
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(resLFC$baseMean, resLFC$log2FoldChange)
rownames(resLFC)[idx]
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(resLFC$baseMean, resLFC$log2FoldChange)
rownames(resLFC)[idx]
View(resLFC)
resLFC@rownames
resLFC@listData
with(resLFC, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="obp69", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(resLFC, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFC, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(resLFC, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(resLFC, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFC, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFC, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
BiocManager::install('EnhancedVolcano')
library(EnhancedVolcano)
resultsNames(dds)
resLFCRM <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
resLFCRM
plotMA(resLFCRM, ylim=c(-2,2))
with(resLFCRM, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR rejected vs mated", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFCRM, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFCRM, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
resLFCVM <- lfcShrink(dds, coef="condition_Virgin_vs_Mated", type="apeglm")
resLFCVM
#plotMA(resLFCVM, ylim=c(-2,2))
with(resLFCVM, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR virgin vs mated", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFCVM, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFCVM, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
EnhancedVolcano(resLFCVM,
lab = rownames(resLFCVM),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
library(dplyr)
library("DESeq2")
library(EnhancedVolcano)
#(!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 50
dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',title = "NPFR tissue")
View(res)
View(res)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',title = "NPFR tissue")
resultsNames(dds)
dds$condition
dds$condition<-relevel(dds$condition,ref = "Mated")
dds$condition<
dds$condition
resultsNames(dds)
dds$condition<-relevel(dds$condition,ref = "Virgin")
dds <- DESeq(dds)
resultsNames(dds)
VirginDds<-dds
dds$condition<-relevel(dds$condition,ref = "Virgin")
VirginDds<-dds
dds$condition<-relevel(dds$condition,ref = "Rejected")
RejectedDds<-dds
dds$condition<-relevel(dds$condition,ref = "Mated")
MatedDds<-dds
VirginDds <- DESeq(VirginDds)
resultsNames(VirginDds)
RejectedDds <- DESeq(RejectedDds)
resultsNames(RejectedDds)
MatedDds <- DESeq(MatedDds)
resultsNames(MatedDds)
resMated <- results(MatedDds)
resRejected<- results(RejectedDds)
resVirgin<- results(VirginDds)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
library(dplyr)
library("DESeq2")
library(EnhancedVolcano)
#(!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("DESeq2")
cts <- (read.csv("D:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/meta_test.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/meta_test.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 50
dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
dds$condition<-relevel(dds$condition,ref = "Virgin")
VirginDds<-dds
dds$condition<-relevel(dds$condition,ref = "Rejected")
RejectedDds<-dds
dds$condition<-relevel(dds$condition,ref = "Mated")
MatedDds<-dds
VirginDds <- DESeq(VirginDds)
resultsNames(VirginDds)
RejectedDds <- DESeq(RejectedDds)
resultsNames(RejectedDds)
MatedDds <- DESeq(MatedDds)
resultsNames(MatedDds)
resMated <- results(MatedDds)
resRejected<- results(RejectedDds)
resVirgin<- results(VirginDds)
vsdata <-vst(resVirgin,blind=FALSE)
vsdata <-vst(RejectedDds,blind=FALSE)
autoplotly::autoplotly((plotPCA(vsdata, intgroup="condition")+geom_text(aes(label=name),vjust=3)+labs(title = "PCA:  mated virgin rejected"))
, data = vsdata, colour = 'Species', frame = TRUE)
plotCounts(RejectedDds, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(resVirgin, gene=which.min(res$padj), intgroup="condition")
vsdata <-vst(resRejected,blind=FALSE)
vsdata <-vst(RejectedDds,blind=FALSE)
plotCounts(RejectedDds, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(resRejected, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
View(RejectedDds)
plotCounts(RejectedDds, gene=which(resRejected@rownames == "NPFR"), intgroup="condition")
resultsNames(RejectedDds)
resLFCRM <- lfcShrink(RejectedDds, coef="condition_Mated_vs_Rejected", type="apeglm")
resLFCRM
#plotMA(resLFCRM, ylim=c(-2,2))
with(resLFCRM, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR rejected vs mated", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFCRM, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFCRM, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
EnhancedVolcano(RejectedDds,
lab = rownames(RejectedDds),
x = 'log2FoldChange',
y = 'padj',title = "NPFR tissue")
EnhancedVolcano(resRejected,
lab = rownames(resRejected),
x = 'log2FoldChange',
y = 'padj',title = "NPFR tissue")
