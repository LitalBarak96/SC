library(dplyr)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
vsdata <-vst(dds,blind=FALSE)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
autoplotly::autoplotly((plotPCA(vsdata, intgroup="condition")+geom_text(aes(label=name),vjust=3)+labs(title = "PCA:  mated virgin rejected"))
, data = vsdata, colour = 'Species', frame = TRUE)
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(vsdata, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NFPR", xlim=c(-3,3), col.sub="orchid4"))
plotMA(res, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
install.packages("apeglm")
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
BiocManager::install("apeglm")
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
resLFC
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
resLFC <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
resLFC
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
rownames(res)[idx]
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(resLFC$baseMean, resLFC$log2FoldChange)
rownames(resLFC)[idx]
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(resLFC$baseMean, resLFC$log2FoldChange)
rownames(resLFC)[idx]
View(resLFC)
resLFC@rownames
resLFC@listData
with(resLFC, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="obp69", xlim=c(-3,3), col.sub="orchid4"))
with(subset(res, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(resLFC, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFC, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(resLFC, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(resLFC, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFC, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFC, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
BiocManager::install('EnhancedVolcano')
library(EnhancedVolcano)
resultsNames(dds)
resLFCRM <- lfcShrink(dds, coef="condition_Rejected_vs_Mated", type="apeglm")
resLFCRM
plotMA(resLFCRM, ylim=c(-2,2))
with(resLFCRM, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR rejected vs mated", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFCRM, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFCRM, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
resLFCVM <- lfcShrink(dds, coef="condition_Virgin_vs_Mated", type="apeglm")
resLFCVM
#plotMA(resLFCVM, ylim=c(-2,2))
with(resLFCVM, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR virgin vs mated", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFCVM, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFCVM, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
EnhancedVolcano(resLFCVM,
lab = rownames(resLFCVM),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
library(dplyr)
library("DESeq2")
library(EnhancedVolcano)
#(!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 50
dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',title = "NPFR tissue")
View(res)
View(res)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',title = "NPFR tissue")
resultsNames(dds)
dds$condition
dds$condition<-relevel(dds$condition,ref = "Mated")
dds$condition<
dds$condition
resultsNames(dds)
dds$condition<-relevel(dds$condition,ref = "Virgin")
dds <- DESeq(dds)
resultsNames(dds)
VirginDds<-dds
dds$condition<-relevel(dds$condition,ref = "Virgin")
VirginDds<-dds
dds$condition<-relevel(dds$condition,ref = "Rejected")
RejectedDds<-dds
dds$condition<-relevel(dds$condition,ref = "Mated")
MatedDds<-dds
VirginDds <- DESeq(VirginDds)
resultsNames(VirginDds)
RejectedDds <- DESeq(RejectedDds)
resultsNames(RejectedDds)
MatedDds <- DESeq(MatedDds)
resultsNames(MatedDds)
resMated <- results(MatedDds)
resRejected<- results(RejectedDds)
resVirgin<- results(VirginDds)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
library(dplyr)
library("DESeq2")
library(EnhancedVolcano)
#(!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("DESeq2")
cts <- (read.csv("D:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/meta_test.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/meta_test.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 50
dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
dds$condition<-relevel(dds$condition,ref = "Virgin")
VirginDds<-dds
dds$condition<-relevel(dds$condition,ref = "Rejected")
RejectedDds<-dds
dds$condition<-relevel(dds$condition,ref = "Mated")
MatedDds<-dds
VirginDds <- DESeq(VirginDds)
resultsNames(VirginDds)
RejectedDds <- DESeq(RejectedDds)
resultsNames(RejectedDds)
MatedDds <- DESeq(MatedDds)
resultsNames(MatedDds)
resMated <- results(MatedDds)
resRejected<- results(RejectedDds)
resVirgin<- results(VirginDds)
vsdata <-vst(resVirgin,blind=FALSE)
vsdata <-vst(RejectedDds,blind=FALSE)
autoplotly::autoplotly((plotPCA(vsdata, intgroup="condition")+geom_text(aes(label=name),vjust=3)+labs(title = "PCA:  mated virgin rejected"))
, data = vsdata, colour = 'Species', frame = TRUE)
plotCounts(RejectedDds, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(resVirgin, gene=which.min(res$padj), intgroup="condition")
vsdata <-vst(resRejected,blind=FALSE)
vsdata <-vst(RejectedDds,blind=FALSE)
plotCounts(RejectedDds, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(resRejected, gene=which(res@rownames == "NPFR"), intgroup="condition")
plotCounts(dds, gene=which(res@rownames == "NPFR"), intgroup="condition")
View(RejectedDds)
plotCounts(RejectedDds, gene=which(resRejected@rownames == "NPFR"), intgroup="condition")
resultsNames(RejectedDds)
resLFCRM <- lfcShrink(RejectedDds, coef="condition_Mated_vs_Rejected", type="apeglm")
resLFCRM
#plotMA(resLFCRM, ylim=c(-2,2))
with(resLFCRM, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", sub="NPFR rejected vs mated", xlim=c(-3,3), col.sub="orchid4"))
with(subset(resLFCRM, pvalue<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="grey"))
with(subset(resLFCRM, pvalue<.05 & abs(log2FoldChange)>=1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
EnhancedVolcano(RejectedDds,
lab = rownames(RejectedDds),
x = 'log2FoldChange',
y = 'padj',title = "NPFR tissue")
EnhancedVolcano(resRejected,
lab = rownames(resRejected),
x = 'log2FoldChange',
y = 'padj',title = "NPFR tissue")
library(stringr)
library(tibble)
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2)
library(gplots)
library(ggthemes)
library(ggrepel)
library(pheatmap)
library(gridExtra)
library(patchwork)
library(openxlsx)
library(readxl)
library(RColorBrewer)
library(DESeq2)
library(Rtsne)
library(factoextra)
library(vegan)
library(biomaRt)
library(stringr)
DE_result_dir<-"E:/seq_data"
cts <- (read.csv("E:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("E:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
coldata$condition <- factor(coldata$condition)
coldata$repeat.<-factor(coldata$repeat.)
NPF_cell<-data_noTPM %>%
select(matches("NPFR"))
colnames(NPF_cell)<-gsub("_counts","",colnames(NPF_cell))
coldata$condition <- factor(coldata$condition)
coldata$repeat. <- factor(coldata$repeat.)
all(rownames(NPF_cell) %in% colnames(NPF_cell))
NPF_gene <- NPF_gene[, rownames(coldata)]
DE_result_dir<-"E:/seq_data"
cts <- (read.csv("E:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("E:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
coldata$condition <- factor(coldata$condition)
coldata$repeat.<-factor(coldata$repeat.)
NPF_cell<-data_noTPM %>%
select(matches("NPFR"))
colnames(NPF_cell)<-gsub("_counts","",colnames(NPF_cell))
coldata$condition <- factor(coldata$condition)
coldata$repeat. <- factor(coldata$repeat.)
all(rownames(NPF_cell) %in% colnames(NPF_cell))
all(rownames(coldata) == colnames(NPF_cell))
dds <- DESeqDataSetFromMatrix(countData = round(NPF_cell),
colData = coldata,
design= ~repeat.+condition)
#dds$cell <- relevel(dds$cell, ref = "Npfr")
dds$condition <- relevel(dds$condition, ref = "Rejected")
dds <- DESeq(dds)
# Returns the names of the estimated effects (coefficents) of the model
resultsNames(dds) #"Group_Post_vs_CTRL"
# Get the Pval, Padj and LFC for each gene
res <- results(dds)
# Print a summary of the results from a DESeq analysis
summary(res) # ~19000 genes
dds <- dds[rowMeans(counts(dds))>25, ]
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name = "condition_Mated_vs_Rejected")
summary(res) # ~6000 genes
#res_treat <- results(dds, name = "cell_Tdc2_vs_Npfr")
#write.csv(res_treat,  file=paste0(DE_result_dir,"/Genes_info.csv"),
#          row.names = TRUE)
vsd <- vst(dds, blind=FALSE)
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
source("~/.active-rstudio-document", echo=TRUE)
DE_result_dir<-"E:/seq_data"
cts <- (read.csv("E:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("E:/seq_data/npfr/only_npfr_metaNooutliers.csv", row.names=1)
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
coldata$condition <- factor(coldata$condition)
coldata$repeat.<-factor(coldata$repeat.)
NPF_cell<-data_noTPM %>%
select(matches("NPFR"))
colnames(NPF_cell)<-gsub("_counts","",colnames(NPF_cell))
coldata$condition <- factor(coldata$condition)
coldata$repeat. <- factor(coldata$repeat.)
all(rownames(NPF_cell) %in% colnames(NPF_cell))
all(rownames(coldata) == colnames(NPF_cell))
dds <- DESeqDataSetFromMatrix(countData = round(NPF_cell),
colData = coldata,
design= ~repeat.+condition)
View(NPF_cell)
rownames(coldata)
View(data_noTPM)
NPF_cell<-NPF_cell %>%
select(matches(
rownames(coldata)))
View(NPF_cell)
DE_result_dir<-"E:/seq_data"
cts <- (read.csv("E:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("E:/seq_data/npfr/only_npfr_metaNooutliers.csv", row.names=1)
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
coldata$condition <- factor(coldata$condition)
coldata$repeat.<-factor(coldata$repeat.)
NPF_cell<-data_noTPM %>%
select(matches("NPFR"))
NPF_cell<-NPF_cell %>%
select(matches(
rownames(coldata)))
colnames(NPF_cell)<-gsub("_counts","",colnames(NPF_cell))
coldata$condition <- factor(coldata$condition)
coldata$repeat. <- factor(coldata$repeat.)
all(rownames(NPF_cell) %in% colnames(NPF_cell))
all(rownames(coldata) == colnames(NPF_cell))
dds <- DESeqDataSetFromMatrix(countData = round(NPF_cell),
colData = coldata,
design= ~repeat.+condition)
#dds$cell <- relevel(dds$cell, ref = "Npfr")
dds$condition <- relevel(dds$condition, ref = "Rejected")
dds <- DESeq(dds)
# Returns the names of the estimated effects (coefficents) of the model
resultsNames(dds) #"Group_Post_vs_CTRL"
# Get the Pval, Padj and LFC for each gene
res <- results(dds)
# Print a summary of the results from a DESeq analysis
summary(res) # ~19000 genes
dds <- dds[rowMeans(counts(dds))>25, ]
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name = "condition_Mated_vs_Rejected")
summary(res) # ~6000 genes
#res_treat <- results(dds, name = "cell_Tdc2_vs_Npfr")
#write.csv(res_treat,  file=paste0(DE_result_dir,"/Genes_info.csv"),
#          row.names = TRUE)
vsd <- vst(dds, blind=FALSE)
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, vsd$repeat.)# remove according to experiment
assay(vsd) <- mat
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
vsd <- vst(dds, blind=FALSE)
vsd <- vst(dds, blind=FALSE)
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, vsd$repeat.)# remove according to experiment
assay(vsd) <- mat
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - After removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - After removing batch effect")
pheatmap(cor(assay(vsd)), main="Samples Correlation Heatmap")
resultsNames(dds)
View(NPF_cell)
DE_result_dir<-"E:/seq_data"
cts <- (read.csv("E:/seq_data/Salmon_TPM_wCounts.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("E:/seq_data/npfr/only_npfr_metaNooutliers.csv", row.names=1)
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
coldata$condition <- factor(coldata$condition)
coldata$repeat.<-factor(coldata$repeat.)
NPF_cell<-data_noTPM %>%
select(matches("NPFR"))
NPF_cell<-NPF_cell %>%
select(matches(
rownames(coldata)))
colnames(NPF_cell)<-gsub("_counts","",colnames(NPF_cell))
coldata$condition <- factor(coldata$condition)
coldata$repeat. <- factor(coldata$repeat.)
all(rownames(NPF_cell) %in% colnames(NPF_cell))
all(rownames(coldata) == colnames(NPF_cell))
dds <- DESeqDataSetFromMatrix(countData = round(NPF_cell),
colData = coldata,
design= ~repeat.+condition)
#dds$cell <- relevel(dds$cell, ref = "Npfr")
dds$condition <- relevel(dds$condition, ref = "Rejected")
dds <- DESeq(dds)
# Returns the names of the estimated effects (coefficents) of the model
resultsNames(dds) #"Group_Post_vs_CTRL"
# Get the Pval, Padj and LFC for each gene
res <- results(dds)
# Print a summary of the results from a DESeq analysis
summary(res) # ~19000 genes
dds <- dds[rowMeans(counts(dds))>25, ]
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name = "condition_Virgin_vs_Rejected")
summary(res) # ~6000 genes
#res_treat <- results(dds, name = "cell_Tdc2_vs_Npfr")
#write.csv(res_treat,  file=paste0(DE_result_dir,"/Genes_info.csv"),
#          row.names = TRUE)
vsd <- vst(dds, blind=FALSE)
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - Before removing batch effect")
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, vsd$repeat.)# remove according to experiment
assay(vsd) <- mat
DESeq2::plotPCA(vsd, intgroup="condition") + geom_label(aes(label=name)) + labs(title = "PCA according to group - After removing batch effect")
DESeq2::plotPCA(vsd, intgroup="repeat.") + geom_label(aes(label=name)) + labs(title = "PCA according to group - After removing batch effect")
pheatmap(cor(assay(vsd)), main="Samples Correlation Heatmap")
res_treat <- results(dds, name = "condition_Virgin_vs_Rejected")
res_df<- as.data.frame(res_treat)
thresh<-0.58
pVal<-0.05
pAdj<-0.1
gene_res_padj_sig <- subset(res_df, padj <= pAdj)
print(paste("gene_res_padj_sig:",nrow(gene_res_padj_sig)))
gene_res_pval_sig <- subset(res_df, pvalue <= pVal)
print(paste("gene_res_pval_sig:",nrow(gene_res_pval_sig)))
gene_res_padj_sig <- subset(gene_res_padj_sig,abs(log2FoldChange) >=thresh)
print(paste("gene_res_padj_sig",thresh,":",nrow(gene_res_padj_sig)))
gene_res_pval_sig <- subset(gene_res_pval_sig,abs(log2FoldChange) >=thresh)
print(paste("gene_res_pval_sig",thresh,":",nrow(gene_res_pval_sig)))
res_treat <- results(dds, name = "condition_Virgin_vs_Rejected")
res_df<- as.data.frame(res_treat)
thresh<-0.58
pVal<-0.05
pAdj<-0.1
# Padj = FDR correction - all the genes that Padj <= 0.1
gene_res_padj_sig <- subset(res_df, padj <= pAdj)
print(paste("gene_res_padj_sig:",nrow(gene_res_padj_sig)))
# Pval - all the genes that Pval <= 0.05
gene_res_pval_sig <- subset(res_df, pvalue <= pVal)
print(paste("gene_res_pval_sig:",nrow(gene_res_pval_sig)))
# Padj - all the genes that Padj<=0.1 and LFC>=thresh
gene_res_padj_sig <- subset(gene_res_padj_sig,abs(log2FoldChange) >=thresh)
print(paste("gene_res_padj_sig",thresh,":",nrow(gene_res_padj_sig)))
# Pval - all the genes that Pval<=0.05 and LFC>=thresh
gene_res_pval_sig <- subset(gene_res_pval_sig,abs(log2FoldChange) >=thresh)
print(paste("gene_res_pval_sig",thresh,":",nrow(gene_res_pval_sig)))
write.table(rownames(gene_res_padj_sig),
file = paste0(DE_result_dir,"/sig_genes_padj_lfc",".txt"),
sep = "\t", row.names = F, col.names = FALSE, quote = FALSE)
write.table(rownames(gene_res_pval_sig),
file = paste0(DE_result_dir,"/sig_genes_pval_lfc",".txt"),
sep = "\t", row.names = F, col.names = FALSE, quote = FALSE)
openxlsx::write.xlsx (gene_res_padj_sig, paste0(DE_result_dir,"/gene_res_padj_sig_all_data",".xlsx"),
rowNames = TRUE, colNames = TRUE)
openxlsx::write.xlsx (gene_res_pval_sig, paste0(DE_result_dir,"/gene_res_pval_sig_all_data",".xlsx"),
rowNames = TRUE, colNames = TRUE)
