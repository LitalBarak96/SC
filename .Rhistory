(!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
install.packages(factoextra)
install.packages("factoextra")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
library(gplots)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
install.packages("manhattanly")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
View(data_noTPM)
View(coldata)
View(coldata)
rownames(coldata) <- sub("_rep", "", rownames(coldata))
View(coldata)
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
View(coldata)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
View(coldata_not_factorial)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
featureData <- data.frame(gene=rownames(data))
mcols(dds) <- DataFrame(mcols(dds), featureData)
mcols(dds)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
#didn't need to subset just change in the meta data
#data<-subset(data,select=-c(N831,N832))
#coldata<-subset(coldata,select=-c(N831,N832))
#rownames(coldata) <- sub("L00", "", rownames(coldata))
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
featureData <- data.frame(gene=rownames(data))
mcols(dds) <- DataFrame(mcols(dds), featureData)
View(data)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
#didn't need to subset just change in the meta data
#data<-subset(data,select=-c(N831,N832))
#coldata<-subset(coldata,select=-c(N831,N832))
#rownames(coldata) <- sub("L00", "", rownames(coldata))
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
library(dplyr)
#removing low count genes
#check this is put the condition right
#dds$condition <- factor(dds$condition, levels = c("males","females"))
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
View(res)
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
plotMA(res, ylim=c(-2,2))
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
View(res)
res@rownames
which.min(res$padj)
View(res)
test<-whice(apply(res,1,function(x) any(grepl("NPF",x))))
test<-which(apply(res,1,function(x) any(grepl("NPF",x))))
test<-which(apply(res@rownames,1,function(x) any(grepl("NPF",x))))
View(dds)
which.min(res$padj)
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
View(dds)
View(temp.df)
jeep
keep
keep[1719]
which.min(res$padj)
keep[1]
summry(dds)
summary(dds)
dds[1]
dds["128up"]
dds["NPF"]
vsdata <-vst(dds,blind=FALSE)
View(vsdata)
View(cts)
cts[grepl("NPF",rownames(cts))]
cts[,grepl("NPF",rownames(cts))]
cts[grepl("NPF",rownames(cts)),]
test<-cts[grepl("NPF",rownames(cts)),]
View(test)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
NPF_gene<-data_noTPM[grepl("NPF",rownames(data_noTPM)),]
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-NPF_gene %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
View(NPF_gene)
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
NPF_gene<-data[grepl("NPF",rownames(data)),]
View(NPF_gene)
coldata$condition <- factor(coldata$condition)
NPF_gene<-data[grepl("NPF",rownames(data)),]
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(NPF_gene))
all(rownames(coldata) == colnames(NPF_gene))
NPF_gene <- NPF_gene[, rownames(coldata)]
all(rownames(coldata) == colnames(NPF_gene))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(NPF_gene),
colData = coldata,
design = ~ condition)
dds
library(dplyr)
#removing low count genes
#check this is put the condition right
#dds$condition <- factor(dds$condition, levels = c("males","females"))
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
df <- as.data.frame(colData(dds)[,c("condition","type")])
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
colData
colData(dds)
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
vsdata <-vst(dds,blind=FALSE)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
coldata$condition <- factor(coldata$condition)
#didn't need to subset just change in the meta data
#data<-subset(data,select=-c(N831,N832))
#coldata<-subset(coldata,select=-c(N831,N832))
#rownames(coldata) <- sub("L00", "", rownames(coldata))
all(rownames(coldata) %in% colnames(data))
all(rownames(coldata) == colnames(data))
data <- data[, rownames(coldata)]
all(rownames(coldata) == colnames(data))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(data),
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#featureData <- data.frame(gene=rownames(data))
#mcols(dds) <- DataFrame(mcols(dds), featureData)
#mcols(dds)
library(dplyr)
#removing low count genes
#check this is put the condition right
#dds$condition <- factor(dds$condition, levels = c("males","females"))
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
plotMA(res, ylim=c(-2,2))
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
vsdata <-vst(dds,blind=FALSE)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
autoplotly::autoplotly((plotPCA(vsdata, intgroup="condition")+geom_text(aes(label=name),vjust=3)+labs(title = "PCA:  mated virgin rejected"))
, data = vsdata, colour = 'Species', frame = TRUE)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(autoplotly)
library(factoextra)
library("pheatmap")
library("RColorBrewer")
#library(limma)
library("manhattanly")
library("ggrepel")
library(plotly)
library("heatmaply")
#(!require("BiocManager", quietly = TRUE))
#install.pacakages("BiocManager")
#BiocManager::install("DESeq2")
library(dplyr)
cts <- (read.csv("D:/seq_data/npfr/counts_npfr.csv",sep=",",row.names="GeneSymbol"))
coldata <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv", row.names=1)
coldata_not_factorial <- read.csv("D:/seq_data/npfr/only_npfr_meta.csv")
data_noTPM <- select(cts, -contains("TPM"))
NPF_gene<-data_noTPM[grepl("NPF",rownames(data_noTPM)),]
data<-data.frame(row.names=rownames(cts))
num_of_exp =9
for (i in 1:num_of_exp){
temp.df<-data.frame()
temp.df<-data_noTPM %>%
select(starts_with(coldata_not_factorial[i,1]))
data[coldata_not_factorial[i,1]]<- rowMeans(temp.df)
}
#rownames(coldata) <- sub("_rep", "", rownames(coldata))
NPF_gene<-data[grepl("NPF",rownames(data)),]
coldata$condition <- factor(coldata$condition)
all(rownames(coldata) %in% colnames(NPF_gene))
all(rownames(coldata) == colnames(NPF_gene))
NPF_gene <- NPF_gene[, rownames(coldata)]
all(rownames(coldata) == colnames(NPF_gene))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = round(NPF_gene),
colData = coldata,
design = ~ condition)
dds
library(dplyr)
#removing low count genes
#check this is put the condition right
#dds$condition <- factor(dds$condition, levels = c("males","females"))
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
vsdata <-vst(dds,blind=FALSE)
y<-subset(res, pvalue<.05 & abs(log2FoldChange)>=1)
idx<-which(rownames(vsdata[,1]) %in% row.names(y))
df <- as.data.frame(colData(dds)[,"condition"])
colnames(df)<-"condition"
row.names(df)<-colnames(mat)
View(df)
View(NPF_gene)
vsdata <-vst(dds,blind=FALSE)
?vst
vsdata <-vst(dds,blind=FALSE,nsub=4)
y<-subset(res, pvalue<.05 & abs(log2FoldChange)>=1)
idx<-which(rownames(vsdata[,1]) %in% row.names(y))
significant<-data[idx,]
View(significant)
View(vsdata)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:4]
df <- as.data.frame(colData(dds)[,c("condition","sizeFactor")])
pheatmap(assay(vsdata)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=FALSE, annotation_col=df)
